{"version":3,"sources":["Components/Header/Header.js","api/axiosConfig/axios-config.js","Components/WaveLoader/WaveLoader.js","Components/NetworkProvider/NetworkProvider.js","Components/GoButton/GoButton.js","constants/app-constants.ts","Components/Stats/Stats.js","Components/SpeedCounter/SpeedCounter.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","axios","create","WaveLoader","height","width","size","containerHeight","containerWidth","animationID","useRef","useEffect","animateLoader","cancelAnimationFrame","current","xs","i","push","t","animate","path","map","x","Math","sin","p","join","document","querySelector","setAttribute","requestAnimationFrame","style","transform","id","NetworkProvider","useState","networkProvider","setNetworkProvider","loading","setLoading","getNetworkProvider","a","axiosConfig","get","result","data","isp","GoButton","onClick","buttonText","SPEED_TEST_TYPE","Stats","currentTestType","downloadSpeed","uploadSpeed","flex","SpeedCounter","type","speed","App","prevProgress","isAnimate","setIsAnimate","showSphere","setShowSphere","speedTestType","setSpeedTestType","setSpeed","downLoadSpeed","setDownloadSpeed","setUploadSpeed","setButtonText","render3D","SoMApiInit","useCallback","container","getElementById","wrapper","offsetWidth","offsetHeight","renderer","WebGLRenderer","canvas","antialias","alpha","setSize","clock","Clock","camera","PerspectiveCamera","scene","Scene","ambientLight","AmbientLight","add","pointLight","PointLight","material","PointsMaterial","color","sphere","SphereGeometry","sphereMesh","Points","position","set","scaleDelimeter","render","rotation","y","z","getElapsedTime","floor","scale","SomApi","account","domainName","config","sustainTime","testServerEnabled","userInfoEnabled","latencyTestEnabled","uploadTestEnabled","progress","enabled","verbose","onTestCompleted","onError","onProgress","testResult","console","log","upload","resetCanvasWrapperClass","error","currentSpeed","classList","remove","startTest","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.bf1b0e41.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nimport { IoTimerOutline } from \"react-icons/io5\";\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <p className=\"app-title\">SpeedTest</p>\n      <IoTimerOutline className=\"app-icon\" />\n    </header>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\n\nexport default axios.create();\n","import React, { useEffect, useRef } from \"react\";\nimport \"./WaveLoader.css\";\n\nconst WaveLoader = ({\n  height,\n  width,\n  size,\n  containerHeight,\n  containerWidth,\n}) => {\n  const animationID = useRef(null);\n  useEffect(() => {\n    animateLoader();\n    return () => {\n      cancelAnimationFrame(animationID.current);\n    };\n  }, []);\n\n  const animateLoader = () => {\n    const waveAmplitute = 45;\n    const waveLength = 30;\n    const waveSpeed = 1.5;\n\n    let xs = [];\n\n    for (let i = 5; i <= 295; i++) {\n      xs.push(i);\n    }\n\n    let t = 0;\n\n    const animate = () => {\n      let points = xs.map((x) => {\n        let y = 100 + waveAmplitute * Math.sin((x + t) / waveLength);\n\n        return [x, y];\n      });\n\n      let path =\n        \"M\" +\n        points\n          .map((p) => {\n            return p[0] + \",\" + p[1];\n          })\n          .join(\" L\");\n\n      document.querySelector(\"#wave-path\").setAttribute(\"d\", path);\n\n      t += waveSpeed;\n\n      animationID.current = requestAnimationFrame(animate);\n    };\n    animate();\n  };\n\n  return (\n    <div\n      className=\"wave-loader-container\"\n      style={{\n        height: containerHeight || \"150px\",\n        width: containerWidth || \"300px\",\n      }}\n    >\n      <svg\n        style={{\n          height: height || \"150px\",\n          width: width || \"300px\",\n          transform: size ? \"scale(\" + size + \")\" : \"scale(0.25)\",\n        }}\n      >\n        <path id=\"wave-path\"></path>\n      </svg>\n    </div>\n  );\n};\n\nexport default WaveLoader;\n","import React, { useEffect, useState } from \"react\";\nimport axiosConfig from \"../../api/axiosConfig/axios-config\";\nimport WaveLoader from \"../WaveLoader/WaveLoader\";\nimport \"./NetworkProvider.css\";\n\nconst NetworkProvider = () => {\n  const [networkProvider, setNetworkProvider] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getNetworkProvider();\n  }, []);\n\n  /**\n   * Get details about ISP and network\n   */\n  const getNetworkProvider = async () => {\n    try {\n      setLoading(true);\n      const result = await axiosConfig.get(\"http://ip-api.com/json\");\n      setNetworkProvider(result.data?.isp);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n\n      setNetworkProvider(\"Unable to detect ISP\");\n    }\n  };\n\n  return (\n    <div className=\"isp-container\">\n      {loading ? <WaveLoader /> : <p className=\"isp-name\">{networkProvider}</p>}\n    </div>\n  );\n};\n\nexport default NetworkProvider;\n","import React from \"react\";\nimport \"./GoButton.css\";\n\nconst GoButton = ({ onClick, buttonText }) => {\n  return (\n    <div className=\"go-button fade-in\" onClick={onClick}>\n      <p className=\"button-text\">{buttonText}</p>\n    </div>\n  );\n};\n\nexport default GoButton;\n","export const ISP_API_URL = \"http://ip-api.com/json\";\n\nexport const SPEED_TEST_TYPE = {\n  DOWNLOAD: \"download\",\n  UPLOAD: \"upload\",\n};\n","import React from \"react\";\nimport \"./Stats.css\";\n\nimport { BiChevronDown, BiChevronUp } from \"react-icons/bi\";\nimport WaveLoader from \"../WaveLoader/WaveLoader\";\nimport { SPEED_TEST_TYPE } from \"../../constants/app-constants\";\n\nconst Stats = ({ currentTestType, downloadSpeed, uploadSpeed }) => {\n  return (\n    <div className=\"stats-container\">\n      {currentTestType && (\n        <>\n          <div className=\"dowload-speed-wrapper\">\n            <div className=\"download-speed-container\">\n              <div className=\"stat-header\">\n                <BiChevronDown className=\"stat-icon\" />\n                <span className=\"stat-title\">DOWNLOAD</span>\n              </div>\n              {downloadSpeed ? (\n                <p className=\"stat-value\">{downloadSpeed}</p>\n              ) : (\n                <WaveLoader containerHeight=\"55px\" />\n              )}\n              <p className=\"stat-unit\"> Mbps</p>\n            </div>\n          </div>\n          <div\n            className=\"upload-speed-wrapper\"\n            style={{\n              flex: currentTestType === SPEED_TEST_TYPE.DOWNLOAD ? 0 : 1,\n              width: currentTestType === SPEED_TEST_TYPE.DOWNLOAD ? 0 : \"auto\",\n            }}\n          >\n            <div\n              className=\"upload-speed-container\"\n              style={{\n                transform:\n                  currentTestType === SPEED_TEST_TYPE.DOWNLOAD\n                    ? \"scale(0)\"\n                    : \"scale(1)\",\n              }}\n            >\n              <div className=\"stat-header\">\n                <BiChevronUp className=\"stat-icon\" />\n                <span className=\"stat-title\">UPLOAD</span>\n              </div>\n              {uploadSpeed ? (\n                <p className=\"stat-value\">{uploadSpeed}</p>\n              ) : (\n                <WaveLoader containerHeight=\"55px\" />\n              )}\n\n              <p className=\"stat-unit\"> Mbps</p>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from \"react\";\nimport { SPEED_TEST_TYPE } from \"../../constants/app-constants\";\nimport \"./SpeedCounter.css\";\n\nconst SpeedCounter = ({ type, speed }) => {\n  return (\n    <div className=\"speed-counter-container ease-in\">\n      <span\n        className={[\n          \"speed\",\n          type === SPEED_TEST_TYPE.DOWNLOAD ? \"white\" : \"pink\",\n        ].join(\" \")}\n      >\n        {speed}\n      </span>\n      <span\n        className={[\n          \"unit\",\n          type === SPEED_TEST_TYPE.DOWNLOAD ? \"white\" : \"pink\",\n        ].join(\" \")}\n      >\n        Mbps\n      </span>\n    </div>\n  );\n};\n\nexport default SpeedCounter;\n","/* eslint-disable no-undef */\nimport \"./App.css\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport {\n  AmbientLight,\n  Clock,\n  PerspectiveCamera,\n  PointLight,\n  Points,\n  PointsMaterial,\n  Scene,\n  SphereGeometry,\n  WebGLRenderer,\n} from \"three\";\nimport Header from \"./Components/Header/Header\";\nimport NetworkProvider from \"./Components/NetworkProvider/NetworkProvider\";\nimport GoButton from \"./Components/GoButton/GoButton\";\nimport Stats from \"./Components/Stats/Stats\";\nimport SpeedCounter from \"./Components/SpeedCounter/SpeedCounter\";\nimport { SPEED_TEST_TYPE } from \"./constants/app-constants\";\n\nfunction App() {\n  const animationID = useRef(null);\n  const prevProgress = useRef(null);\n\n  const [isAnimate, setIsAnimate] = useState(false);\n  const [showSphere, setShowSphere] = useState(false);\n  const [speedTestType, setSpeedTestType] = useState(null);\n  const [speed, setSpeed] = useState(0);\n  const [downLoadSpeed, setDownloadSpeed] = useState(null);\n  const [uploadSpeed, setUploadSpeed] = useState(null);\n  const [buttonText, setButtonText] = useState(\"GO\");\n\n  useEffect(() => {\n    render3D();\n    SoMApiInit();\n  }, [isAnimate, showSphere, speedTestType]);\n\n  /**\n   * Render 3d spehere\n   */\n  const render3D = useCallback(() => {\n    if (showSphere) {\n      const container = document.getElementById(\"three-js-container\");\n      const wrapper = document.getElementById(\"canvas-wrapper\");\n      const width = wrapper.offsetWidth - 10;\n      const height = wrapper.offsetHeight - 10;\n\n      const renderer = new WebGLRenderer({\n        canvas: container,\n        antialias: true,\n        alpha: true,\n      });\n      renderer.setSize(width, height);\n\n      // Clock\n      let clock = new Clock();\n\n      // Camera\n      const camera = new PerspectiveCamera(35, width / height, 0.1, 3000);\n\n      // Scene\n      const scene = new Scene();\n\n      // Lights\n      const ambientLight = new AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n\n      const pointLight = new PointLight(0xffffff, 0.5);\n      scene.add(pointLight);\n\n      // Geometrys\n      const material = new PointsMaterial({\n        color: speedTestType === SPEED_TEST_TYPE.DOWNLOAD ? 0x249ade : 0xe53d8b,\n        size: 10,\n      });\n      const sphere = new SphereGeometry(230, 34, 34);\n      const sphereMesh = new Points(sphere, material);\n      sphereMesh.position.set(0, 0, -1000);\n      scene.add(sphereMesh);\n\n      const scaleDelimeter = 0.0015;\n\n      const animate = () => {\n        animationID.current = requestAnimationFrame(animate);\n        sphereMesh.rotation.y += 0.01;\n        sphereMesh.position.z += 0.01;\n\n        const t = clock.getElapsedTime();\n        if (Math.floor(t) % 2 === 0) {\n          sphereMesh.scale.x -= scaleDelimeter;\n          sphereMesh.scale.y -= scaleDelimeter;\n          sphereMesh.scale.z -= scaleDelimeter;\n        } else {\n          sphereMesh.scale.x += scaleDelimeter;\n          sphereMesh.scale.y += scaleDelimeter;\n          sphereMesh.scale.z += scaleDelimeter;\n        }\n\n        renderer.render(scene, camera);\n      };\n\n      renderer.render(scene, camera);\n\n      //Animation\n      isAnimate ? animate() : cancelAnimationFrame(animationID.current);\n    }\n  }, [isAnimate, showSphere, speedTestType]);\n\n  /**\n   * Initialize SpeedOf.me api\n   */\n  const SoMApiInit = () => {\n    SomApi.account = \"SOM60def9369dba7\"; // YOUR API KEY\n    SomApi.domainName = \"dimaodin.github.io\";\n    SomApi.config.sustainTime = 4;\n    SomApi.config.testServerEnabled = true;\n    SomApi.config.userInfoEnabled = true;\n    SomApi.config.latencyTestEnabled = false;\n    SomApi.config.uploadTestEnabled = true;\n    SomApi.config.progress.enabled = true;\n    SomApi.config.progress.verbose = true;\n    SomApi.onTestCompleted = onTestCompleted;\n    SomApi.onError = onError;\n    SomApi.onProgress = onProgress;\n  };\n\n  /**\n   * On completion of speed test call back\n   * @param {object} testResult - speed test result\n   */\n  const onTestCompleted = (testResult) => {\n    console.log(\"---------------- test result --------------\");\n    console.log(testResult);\n    setShowSphere(false);\n    setIsAnimate(false);\n    setUploadSpeed(testResult.upload);\n    setButtonText(\"RESTART\");\n    resetCanvasWrapperClass();\n  };\n\n  /**\n   * On error of speedof.me api call back\n   * @param {object} error - Speed test api error\n   */\n  const onError = (error) => {\n    console.log(\"-------------- error ----------------------\");\n    console.log(error);\n  };\n\n  /**\n   * On progress of speedtest api callback\n   * @param {object} progress - Speed test progress data\n   */\n  const onProgress = (progress) => {\n    // console.log(\"-------------- progress ----------------------\");\n    // console.log(progress);\n\n    if (progress.type !== SPEED_TEST_TYPE.DOWNLOAD && !downLoadSpeed) {\n      setDownloadSpeed(prevProgress.current.currentSpeed || null);\n    }\n\n    setSpeedTestType(progress.type);\n    setSpeed(progress.currentSpeed);\n    prevProgress.current = { ...progress };\n  };\n\n  /**\n   * Remove pink glow from go button sphere after completing the test\n   */\n  const resetCanvasWrapperClass = () => {\n    const canvasWrapper = document.getElementById(\"canvas-wrapper\");\n    canvasWrapper.classList.remove(SPEED_TEST_TYPE.UPLOAD);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"speed-test-container\">\n        <Header />\n\n        <NetworkProvider />\n\n        <div className=\"canvas-container\">\n          <div\n            id=\"canvas-wrapper\"\n            className={speedTestType ? speedTestType : \"\"}\n          >\n            {showSphere ? (\n              <canvas id=\"three-js-container\" className=\"fade-in\"></canvas>\n            ) : (\n              <GoButton\n                buttonText={buttonText}\n                onClick={() => {\n                  setSpeedTestType(null);\n                  setDownloadSpeed(null);\n                  setUploadSpeed(null);\n                  setShowSphere(true);\n                  setIsAnimate(true);\n                  SomApi.startTest();\n                }}\n              />\n            )}\n            {showSphere ? (\n              <SpeedCounter type={speedTestType} speed={Math.round(speed)} />\n            ) : null}\n          </div>\n        </div>\n\n        <Stats\n          currentTestType={speedTestType}\n          downloadSpeed={downLoadSpeed}\n          uploadSpeed={uploadSpeed}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}